{"version":3,"sources":["components/game.js","layout/nav.js","layout/header.js","layout/about.js","App.js","serviceWorker.js","index.js"],"names":["Cell","this","props","x","y","id","className","style","left","top","width","CELL_SIZE","height","React","Component","Game","state","cells","interval","isRunning","generation","theme","componentDidMount","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","setHighInterval","setRegInterval","setLowInterval","handleClear","makeEmptyBoard","handleRandom","round","random","setDarkTheme","document","getElementById","setLightTheme","HEIGHT","WIDTH","rect","boardRef","getBoundingClientRect","doc","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","console","log","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","Nav","to","Header","About","App","exact","path","component","Boolean","location","hostname","match","AppWithRouter","withRouter","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b05a8f92.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useLayoutEffect } from 'react';\r\n// import Cell from './Cells'\r\n// // import useRect from './useRect';\r\n\r\nconst CELL_SIZE = 20;\r\nconst WIDTH = 600;\r\nconst HEIGHT = 600;\r\n\r\n\r\nclass Cell extends React.Component {\r\n\r\n    render() {\r\n        const { x, y } = this.props;\r\n        return (\r\n            <div id = \"Cell\" className=\"Cell-light\" style={{\r\n                left: `${CELL_SIZE * x + 1}px`,\r\n                top: `${CELL_SIZE * y + 1}px`,\r\n                width: `${CELL_SIZE - 1}px`,\r\n                height: `${CELL_SIZE - 1}px`,\r\n            }} />\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.rows = HEIGHT / CELL_SIZE;\r\n        this.cols = WIDTH / CELL_SIZE;\r\n\r\n        this.board = this.makeEmptyBoard();\r\n    }\r\n\r\n    state = {\r\n        cells: [],\r\n        interval: 1000,\r\n        isRunning: false,\r\n        generation: 1,\r\n        theme: 'dark',\r\n    }\r\n\r\n        componentDidMount = () =>{\r\n\r\n        }\r\n\r\n             // Trying to put in param to auto time out game when no living cells remain\r\n    // componentDidUpdate = () =>{\r\n    //     while(this.state.isRunning = false){\r\n    //         this.handleClick()\r\n    //     }\r\n    // }\r\n\r\n    // Create an empty board\r\n    makeEmptyBoard(){\r\n        let board = [];\r\n        for (let y = 0; y < this.rows; y++){\r\n            board[y] = [];\r\n            for (let x = 0; x < this.cols; x++){\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    // Calculate the position of a board element\r\n\r\n    getElementOffset(){\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return{\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\r\n        };\r\n    }\r\n\r\n    // Create cells from this.Board\r\n    makeCells(){\r\n        let cells = [];\r\n        for(let y = 0; y < this.rows; y++) {\r\n            for(let x = 0; x < this.cols; x++){\r\n                if (this.board[y][x]){\r\n                    cells.push({ x, y});\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    // preset cells?\r\n    // makePremadeCells(){\r\n    //     let cells = [];\r\n    //     let y = 3\r\n    //     let x = 5\r\n    //     if (this.board[y][x]){\r\n    //            cells.push({x, y})\r\n    //     }\r\n    // }\r\n\r\n    handleClick = (event) => {\r\n        const elemOffset = this.getElementOffset();\r\n        const offsetX = event.clientX - elemOffset.x;\r\n        const offsetY = event.clientY - elemOffset.y;\r\n\r\n        const x = Math.floor(offsetX / CELL_SIZE);\r\n        const y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n        \r\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows){\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n\r\n        this.setState({ cells: this.makeCells() });\r\n       \r\n    }\r\n\r\n    \r\n\r\n// Game helpers\r\n\r\n    runGame = () =>{\r\n        this.setState({ isRunning: true });\r\n        this.runIteration();\r\n    }\r\n\r\n    stopGame = () =>{\r\n        this.setState({ isRunning: false });\r\n        if (this.timeoutHandler){\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    handleIntervalChange = (event) =>{\r\n        this.setState({ interval: event.target.value });\r\n    }\r\n\r\n    setHighInterval = (value) =>{\r\n        this.setState({ interval: 500 })\r\n    }\r\n\r\n    setRegInterval = (value) =>{\r\n        this.setState({ interval: 1000})\r\n    }\r\n\r\n    setLowInterval = (value) =>{\r\n        this.setState({ interval: 1400 })\r\n    }\r\n\r\n    runIteration(){\r\n        console.log('running iteration');\r\n        let newBoard = this.makeEmptyBoard();\r\n\r\n        //  TODO: add logic for iterations here\r\n        \r\n        for (let y = 0; y < this.rows; y++){\r\n            for (let x = 0; x < this.cols; x++){\r\n                \r\n                let neighbors = this.calculateNeighbors(this.board, x, y);\r\n                \r\n                if (this.board[y][x]){\r\n                    if (neighbors === 2 || neighbors === 3){\r\n                        newBoard[y][x] = true;\r\n                    } else {\r\n                        newBoard[y][x] = false;\r\n                    }\r\n                } else {\r\n                    if (!this.board[y][x] && neighbors === 3){\r\n                        newBoard[y][x] = true;\r\n                    }\r\n                }\r\n                if(this.cells === 0){\r\n                    this.stopGame()\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newBoard;\r\n        this.setState({ cells: this.makeCells() });\r\n        this.state.generation++;\r\n\r\n        this.timeoutHandler = window.setTimeout(() =>{\r\n            this.runIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    /**\r\n     * Calculate number of neighbors at point (x,y)\r\n     * @param {Array} board\r\n     * @param {int} x \r\n     * @param {int} y\r\n     */\r\n\r\n    calculateNeighbors(board, x, y){\r\n        let neighbors = 0;\r\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1] [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < dirs.length; i++){\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0]\r\n            let x1 = x + dir[1];\r\n\r\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]){\r\n                neighbors++;\r\n            }\r\n        }\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    handleClear = () =>{\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({ cells: this.makeCells() });\r\n        this.setState({ generation: 1 });\r\n    }\r\n\r\n    handleRandom = () =>{\r\n        for (let y = 0; y < Math.floor(Math.round(Math.random() * 80)); y++){\r\n            for (let x = 0; x < Math.floor(Math.round(Math.random() * 80)); x++){\r\n                this.board[y][x] = Math.round(Math.random());\r\n            }\r\n        }\r\n\r\n       \r\n        this.setState({ cells: this.makeCells()});\r\n        \r\n    }\r\n\r\n    setDarkTheme = () =>{\r\n      const { cells } = this.state\r\n        document.getElementById('Board').className = 'Board'\r\n        // document.getElementById('Cell').querySelectorAll('Cell').className = 'Cell';\r\n        // console.log(cells)\r\n    }\r\n\r\n    // setDarkCell =(Cell) =>{\r\n    //     document.getElementById('Cell').className = 'Cell';\r\n    // }\r\n\r\n    setLightTheme = () =>{\r\n        document.getElementById('Board').className = 'Board-light';\r\n    }\r\n\r\n    render(){\r\n        const { cells, interval, generation, isRunning } =this.state;\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"ruleblock\">\r\n                <div id='Board' className=\"Board\" \r\n                style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px` }}\r\n                    onClick={this.handleClick} ref={(n) =>{\r\n                        this.boardRef = n;\r\n                    }}\r\n                    >\r\n                    \r\n                    {cells.map(cell =>(\r\n\r\n                        <Cell id='Cell' className='Cell-light' x={cell.x} y={cell.y} key={`${cell.x}, ${cell.y}`}/>\r\n                    ))}\r\n                </div>\r\n                <div className=\"rules\">\r\n                <h2>Rules</h2>\r\n                <ol className=\"list\">\r\n                    <li>Any live cell with fewer than two live neighbors dies, as if by underpopulation.</li>\r\n                    <li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n                    <li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>\r\n                    <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\r\n                </ol>\r\n                </div>\r\n                </div>\r\n                <div className=\"controls\">\r\n                    <div className =\"spd-input\">\r\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange}/> msec\r\n                    {isRunning ? \r\n                        <button className=\"btn-primary\" onClick={this.stopGame}>Stop</button> :\r\n                        <button className=\"btn-success\" onClick={this.runGame}>Run</button>\r\n                        \r\n                    }\r\n                    <button className=\"btn\" onClick={this.handleRandom}>Random</button>\r\n                    <button className=\"btn\" onClick={this.handleClear}>Clear</button>\r\n                    </div>\r\n                    <h2 className=\"generation\" value={this.state.generation}>You are on Generation {generation}</h2>\r\n                    <div className=\"settings\">\r\n                    <h3>Options</h3>\r\n                    <button className=\"btn\" onClick={this.setDarkTheme}>Dark Theme</button>\r\n                    <button className=\"btn\" onClick={this.setLightTheme}>Light Theme</button>\r\n                    <button className=\"btn\" onClick={this.setLowInterval}>Slow</button>\r\n                    <button className=\"btn\" onClick={this.setRegInterval}>Moderate</button>\r\n                    <button className=\"btn\" onClick={this.setHighInterval}>Fast</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default function Nav(){\r\n    return (\r\n        <div className=\"Nav\">\r\n          <NavLink to=\"/\">Game</NavLink>\r\n          <NavLink to=\"/about\">About</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Header(){\r\n    return(\r\n        <div className='header'>\r\n            <h1>Conway's Game of Life</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass About extends React.Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>About</h1>\r\n                <h2>Rules</h2>\r\n                <ol className=\"orderedList\">\r\n                    <li>Any live cell with fewer than two live neighbors dies, as if by underpopulation.</li>\r\n                    <li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n                    <li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>\r\n                    <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\r\n                </ol>\r\n                <h2>The Algorithm</h2>\r\n                <p className=\"algoP\">The Game of Life is a cellular automaton designed in 1970 by British mathematician John Horton Conway. It takes zero players because the game runs itself from an intital state set by a user. The game is comprised of a grid of square cells with each cell being alive/on or dead/off. The game follows the rules and affects each cell based on its eight neighbors directly above, below, left, right, and diagonally. In theory, Conway's Game of Life is Turing complete in that anything that can be computed algorithmically can be computed with the game.</p>\r\n                <Link to=\"/\">Game</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About; ","import React from 'react';\r\nimport Game from './components/game';\r\nimport Nav from './layout/nav';\r\nimport Header from './layout/header'\r\nimport About from './layout/about';\r\n\r\nimport { Route } from 'react-router-dom';\r\nimport './styles/Game.css';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <div className=\"container\">\r\n      <Header/>\r\n      <Route exact path ='/' component={Game}/>\r\n      <Route path='/about' component={About}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter as Router, withRouter } from 'react-router-dom';\r\n\r\nconst AppWithRouter = withRouter(App);\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <AppWithRouter />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}